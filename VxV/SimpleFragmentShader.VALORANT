#version 330 core
#define MAX_LIGHTS 20

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace[MAX_LIGHTS];

// Output data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MVP;

// Material properties as uniforms
uniform vec3 MaterialAmbientColor;
uniform vec3 MaterialDiffuseColor;
uniform vec3 MaterialSpecularColor;


uniform vec3 LightPosition_worldspace[MAX_LIGHTS];
uniform vec3 LightColor[MAX_LIGHTS];
uniform float LightPower[MAX_LIGHTS];
uniform int NumLights;

void main(){
    // Material properties from texture
    vec3 MaterialAmbientColor2 = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
    vec3 textureColor = vec3(0.3,0.3,0.3) * texture( myTextureSampler, UV ).rgb;
    vec3 MaterialDiffuseColor2 = mix(texture( myTextureSampler, UV ).rgb , MaterialDiffuseColor , 0.5);
    //MaterialAmbientColor2 = mix(MaterialAmbientColor2, texture( myTextureSampler, UV ).rgb, 0.1);

    vec3 colorTemp = MaterialAmbientColor2;

    for (int i = 0; i <= NumLights; ++i) {
        // Distance to the light
        float distance = length( LightPosition_worldspace[i] - Position_worldspace );

        // Direction of the light (from the fragment to the light)
        vec3 l = normalize( LightDirection_cameraspace[i] );

        // Normal of the computed fragment, in camera space
        vec3 n = normalize( Normal_cameraspace );
        // Cosine of the angle between the normal and the light direction, 
        // clamped above 0
        //  - light is at the vertical of the triangle -> 1
        //  - light is perpendicular to the triangle -> 0
        //  - light is behind the triangle -> 0
        float cosTheta = clamp( dot( n,l ), 0,1 );
    
        // Eye vector (towards the camera)
        vec3 E = normalize(EyeDirection_cameraspace);
        // Direction in which the triangle reflects the light
        vec3 R = reflect(-l,n);
        // Cosine of the angle between the Eye vector and the Reflect vector,
        // clamped to 0
        //  - Looking into the reflection -> 1
        //  - Looking elsewhere -> < 1
        float cosAlpha = clamp( dot( E,R ), 0,1 );
        colorTemp += 
            // Ambient : simulates indirect lighting
            textureColor +
            // Diffuse : "color" of the object
            MaterialDiffuseColor2 * LightColor[i] * LightPower[i] * cosTheta / (distance*distance) +
            // Specular : reflective highlight, like a mirror
            MaterialSpecularColor * LightColor[i] * LightPower[i] * pow(cosAlpha,5) / (distance*distance);
    }
    color = vec4(colorTemp, 1.0);


}